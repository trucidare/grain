/* grainc-flags --compilation-mode=runtime */

// WebAssembly Memory Instructions
expose primitive load: (WasmI32, WasmI32) -> WasmI32 = "@wasm.load_int32"
expose primitive load8S: (WasmI32, WasmI32) -> WasmI32 = "@wasm.load_8_s_int32"
expose primitive load8U: (WasmI32, WasmI32) -> WasmI32 = "@wasm.load_8_u_int32"
expose primitive load16S: (
  WasmI32,
  WasmI32,
) -> WasmI32 = "@wasm.load_16_s_int32"
expose primitive load16U: (
  WasmI32,
  WasmI32,
) -> WasmI32 = "@wasm.load_16_u_int32"
expose primitive store: (
  WasmI32,
  WasmI32,
  WasmI32,
) -> Void = "@wasm.store_int32"
expose primitive store8: (
  WasmI32,
  WasmI32,
  WasmI32,
) -> Void = "@wasm.store_8_int32"
expose primitive store16: (
  WasmI32,
  WasmI32,
  WasmI32,
) -> Void = "@wasm.store_16_int32"

// WebAssembly Unary Instructions
expose primitive clz: WasmI32 -> WasmI32 = "@wasm.clz_int32"
expose primitive ctz: WasmI32 -> WasmI32 = "@wasm.ctz_int32"
expose primitive popcnt: WasmI32 -> WasmI32 = "@wasm.popcnt_int32"
expose primitive eqz: WasmI32 -> Bool = "@wasm.eq_z_int32"

// WebAssembly Binary Instructions
expose primitive add: (WasmI32, WasmI32) -> WasmI32 = "@wasm.add_int32"
expose primitive sub: (WasmI32, WasmI32) -> WasmI32 = "@wasm.sub_int32"
expose primitive mul: (WasmI32, WasmI32) -> WasmI32 = "@wasm.mul_int32"
expose primitive divS: (WasmI32, WasmI32) -> WasmI32 = "@wasm.div_s_int32"
expose primitive divU: (WasmI32, WasmI32) -> WasmI32 = "@wasm.div_u_int32"
expose primitive remS: (WasmI32, WasmI32) -> WasmI32 = "@wasm.rem_s_int32"
expose primitive remU: (WasmI32, WasmI32) -> WasmI32 = "@wasm.rem_u_int32"
expose primitive and: (WasmI32, WasmI32) -> WasmI32 = "@wasm.and_int32"
expose primitive or: (WasmI32, WasmI32) -> WasmI32 = "@wasm.or_int32"
expose primitive xor: (WasmI32, WasmI32) -> WasmI32 = "@wasm.xor_int32"
expose primitive shl: (WasmI32, WasmI32) -> WasmI32 = "@wasm.shl_int32"
expose primitive shrS: (WasmI32, WasmI32) -> WasmI32 = "@wasm.shr_s_int32"
expose primitive shrU: (WasmI32, WasmI32) -> WasmI32 = "@wasm.shr_u_int32"
expose primitive rotl: (WasmI32, WasmI32) -> WasmI32 = "@wasm.rot_l_int32"
expose primitive rotr: (WasmI32, WasmI32) -> WasmI32 = "@wasm.rot_r_int32"
expose primitive eq: (WasmI32, WasmI32) -> Bool = "@wasm.eq_int32"
expose primitive ne: (WasmI32, WasmI32) -> Bool = "@wasm.ne_int32"
expose primitive ltS: (WasmI32, WasmI32) -> Bool = "@wasm.lt_s_int32"
expose primitive ltU: (WasmI32, WasmI32) -> Bool = "@wasm.lt_u_int32"
expose primitive leS: (WasmI32, WasmI32) -> Bool = "@wasm.le_s_int32"
expose primitive leU: (WasmI32, WasmI32) -> Bool = "@wasm.le_u_int32"
expose primitive gtS: (WasmI32, WasmI32) -> Bool = "@wasm.gt_s_int32"
expose primitive gtU: (WasmI32, WasmI32) -> Bool = "@wasm.gt_u_int32"
expose primitive geS: (WasmI32, WasmI32) -> Bool = "@wasm.ge_s_int32"
expose primitive geU: (WasmI32, WasmI32) -> Bool = "@wasm.ge_u_int32"

// WebAssembly Conversion Instructions
expose primitive wrapI64: WasmI64 -> WasmI32 = "@wasm.wrap_int64"
expose primitive truncF32S: WasmF32 -> WasmI32 = "@wasm.trunc_s_float32_to_int32"
expose primitive truncF32U: WasmF32 -> WasmI32 = "@wasm.trunc_u_float32_to_int32"
expose primitive truncF64S: WasmF64 -> WasmI32 = "@wasm.trunc_s_float64_to_int32"
expose primitive truncF64U: WasmF64 -> WasmI32 = "@wasm.trunc_u_float64_to_int32"
expose primitive reinterpretF32: WasmF32 -> WasmI32 = "@wasm.reinterpret_float32"
expose primitive extendS8: WasmI32 -> WasmI32 = "@wasm.extend_s8_int32"
expose primitive extendS16: WasmI32 -> WasmI32 = "@wasm.extend_s16_int32"

// Grain Conversions
expose primitive fromGrain: a -> WasmI32 = "@wasm.fromGrain"
expose primitive toGrain: WasmI32 -> a = "@wasm.toGrain"
